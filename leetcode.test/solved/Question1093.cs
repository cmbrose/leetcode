using System.Collections.Generic;
using NUnit.Framework;

namespace leetcode.test
{
    public class Question1093
    {
        private static void RunTest(double[] expected, int[] count)
        {
            double[] actual = leetcode.Question1093.Solve(count);

            string[] stats = new[] { "Min", "Max", "Mean", "Median", "Mode", };

            for (int i = 0; i < expected.Length; ++i)
            {
                if (expected[i] >= 0.0)
                {
                    Assert.AreEqual(expected[i], actual[i], System.Math.Pow(10, -5), $"{stats[i]} is wrong");
                }
            }
        }

        private static int[] BuildCount(Dictionary<int, int> count)
        {
            int[] arr = new int[256];
            foreach (var kvp in count)
            {
                arr[kvp.Key] = kvp.Value;
            }

            return arr;
        }

        [Test]
        public void TestExamples()
        {
            RunTest(new double[] { 1, 3, 2.375, 2.5, 3, }, new[] { 0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 });

            // These have rounding errors
            //RunTest(new double[] { 1, 4, 2.18182, 2, 1, }, new[] { 0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 });        
            //RunTest(new double[] { 135, 224, 177.84782, 177, 175, }, new[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,832,1376,1974,2432,2984,3696,4088,4727,5235,5836,6410,6957,7400,8287,8712,9334,9696,10234,10742,11520,11976,12587,12991,13517,13941,14638,15154,15814,16354,16759,17544,17963,18455,19201,19888,20180,20754,21454,21935,21955,21495,21218,20799,20370,19828,19402,18705,18353,17986,17553,17266,16648,16380,15765,15346,15115,14490,13927,13544,13073,12803,12264,11570,11219,11131,10340,9974,9520,9239,8711,8247,7704,7300,6890,6412,6032,5468,5142,4605,4269,3827,3374,2801,2497,2029,1588,1064,697,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 });
        }

        [Test]
        public void TestSingleElement()
        {
            RunTest(new double[] { 1, 1, 1, 1, 1, }, BuildCount(new Dictionary<int, int>
            {
                { 1, 1 },
            }));
        }

        [Test]
        public void TestMedianOfEvenCounts()
        {
            RunTest(new double[] { -1, -1, -1, 1.5, -1, }, BuildCount(new Dictionary<int, int>
            {
                { 1, 1 },
                { 2, 1 },
            }));

            RunTest(new double[] { -1, -1, -1, 2.5, -1, }, BuildCount(new Dictionary<int, int>
            {
                { 1, 1 },
                { 2, 1 },
                { 3, 2 },
            }));

            RunTest(new double[] { -1, -1, -1, 2.5, -1, }, BuildCount(new Dictionary<int, int>
            {
                { 0, 1 },
                { 1, 1 },
                { 2, 1 },
                { 3, 2 },
                { 4, 1 },
            }));
        }

        [Test]
        public void TestMedianOfOddCounts()
        {
            RunTest(new double[] { -1, -1, -1, 1, -1, }, BuildCount(new Dictionary<int, int>
            {
                { 1, 1 },
            }));

            RunTest(new double[] { -1, -1, -1, 3, -1, }, BuildCount(new Dictionary<int, int>
            {
                { 2, 1 },
                { 3, 2 },
            }));

            RunTest(new double[] { -1, -1, -1, 3, -1, }, BuildCount(new Dictionary<int, int>
            {
                { 1, 1 },
                { 2, 1 },
                { 3, 2 },
                { 4, 1 },
            }));
        }
    }
}